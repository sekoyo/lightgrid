@mixin scroll {
  overflow: auto;
  scrollbar-color: var(--lgScrollThumb) var(--lgScrollTrack);

  // Only add on mouse devices else measuring scrollbar with will misreport
  // on mobile even though the scrollbar is an overlay and takes no space.
  @media (hover: hover) and (pointer: fine) {
    // Size
    &::-webkit-scrollbar {
      width: 14px;
      height: 14px;
    }

    // Track
    &::-webkit-scrollbar-track {
      background: var(--lgScrollTrack);
    }
    &::-webkit-scrollbar-corner {
      background: var(--lgScrollTrack);
    }

    // Handle
    &::-webkit-scrollbar-thumb {
      background: var(--lgScrollThumb);
      border-radius: 8px;
      border: 3px solid var(--lgScrollTrack);
    }

    // Handle on hover
    &::-webkit-scrollbar-thumb:hover {
      background: var(--lgScrollThumbHover);
    }
  }
}

// Used in getScrollbarSize else on touch devices it will
// come back as 0 since they are overlays by default. But
// as soon as we style the scrollbar to not look terrible
// it unfortunately means the scrollbar will always be visible
// and never a nice overlay on phones/laptops.
.lg-scroll {
  @include scroll;
}

.lg {
  --lgCellHPadding: 10px;

  *,
  *::before,
  *::after {
    box-sizing: border-box;
  }

  position: relative;
  box-sizing: border-box;
  width: 100%;
  height: 100%;
  flex: 1;
  border-radius: var(--lgBorderRadius);
  border: 1px solid var(--lgBorderColor);
  overflow: hidden;
  color: var(--lgTextColor);
  background: var(--lgCellOddBg, var(--lgBg));

  &-canvas {
    position: relative;
    @include scroll;
    height: 100%;
    contain: strict;
  }

  &-grid-sizer {
    position: absolute;
    top: 0;
    left: 0;
  }

  &-viewport {
    position: sticky;
    top: 0;
    left: 0;
    contain: strict;
    overflow: hidden;

    &[data-cell-selection='true'] {
      user-select: none;
    }
  }

  &-view {
    position: absolute;
    top: 0;
    left: 0;
  }

  &-area {
    position: absolute;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
    pointer-events: none;

    &-inner {
      pointer-events: auto;
    }

    // TODO: Can we solve it better? e.g. 1 more div around rows
    // All this faff instead of outline on &-inner is so that
    // we can have a conditional border on the bottom when the
    // content is too short.
    &-h-borders,
    &-v-borders {
      &::after,
      &::before {
        content: '';
        display: block;
        position: absolute;
        background: var(--lgBorderColor);
      }
    }

    &-v-borders::before {
      width: 1px;
      top: -1px;
      bottom: -1px;
      left: -1px;
    }

    &-v-borders::after {
      width: 1px;
      top: -1px;
      bottom: -1px;
      right: -1px;
    }

    &-h-borders::before {
      height: 1px;
      top: -1px;
      left: -1px;
      right: -1px;
    }

    &-h-borders[data-borderbottom='true']::after {
      height: 1px;
      bottom: -1px;
      left: -1px;
      right: -1px;
    }
  }

  &-detail-row {
    position: absolute;
    z-index: 1;
    left: 0;
    width: 100%;

    &-inner {
      position: sticky;
      left: 0;
      width: 100%;
      height: 100%;
      outline: 1px solid var(--lgBorderColor);
      background: var(--lgCellOddBg, var(--lgBg));
    }
  }

  &-spanned-cell {
    position: sticky;
    left: 0;
    width: 100%;
    height: 100%;
  }

  &-row {
    position: absolute;
    width: 100%;
  }

  &-resizer-marker {
    position: absolute;
    top: 0;
    bottom: 0;
    z-index: 2;
    width: 1px;
    pointer-events: none;
    background-color: var(--lgColResizeColor);
  }

  &-overlay {
    position: absolute;
    left: 0;
    right: 0;
    bottom: 0;
    pointer-events: none;
  }

  &-loading-overlay {
    position: sticky;
    pointer-events: none;
  }
}

// On touch the optimisations we've done for scroll cause jittering,
// not sure why, so let the browser scroll natively.
@media (hover: none) and (pointer: coarse) {
  .lg {
    &-grid-sizer {
      display: none;
    }
    &-viewport {
      position: unset;
      overflow: unset;
      contain: unset;
    }
  }
}
